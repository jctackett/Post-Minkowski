import argparse
import numpy as np
import math
from scipy import optimize

#----------Set SI units to be used for calculating real values------#
G = 6.647*10**-11
YEAR = 31536000
AU = 1.496 * 10**11
KM = 1000
SOLAR_MASS = 1.989 * 10**30
G_SCALED = 1

M = SOLAR_MASS

#--------Take in command line arguments---#
parser = argparse.ArgumentParser(description = 'Initial parameters for black hole position and mass.')
parser.add_argument('file', type=argparse.FileType('w'), help='name of the file for this program to write to', metavar='FILE')
parser.add_argument('m1', type=float, help='mass of the first black hole', metavar='NUM')
parser.add_argument('m2', type=float, help='mass of the second black hole', metavar='NUM')
parser.add_argument('separation', type=float, help='separation of the binary star system', metavar='SEPARATION')
parser.add_argument('distance_unit', type=str, help='units for the separation of the bodies, examples are AU, KM, M', metavar = 'UNIT')
parser.add_argument('eccentricity', type=float, help='eccentricity of the orbit, must be between 0 and 1', metavar = 'ECC')

args = parser.parse_args()

mass1 = args.m1
mass2 = args.m2
D = args.separation
unit = args.distance_unit
ecc = args.eccentricity

#----------Set factors for changing parameters based on eccentricity-#
if not (0 <= ecc <= 1) : ecc = 0
qfactor = 1 - ecc
pfactor = math.sqrt((1 + ecc)/(1 - ecc))

#---------Set the units for distance and time---#
if unit == "AU": L = AU
elif unit == "KM": L = KM
elif unit == "M": L = 1

T = math.sqrt(L**3 / (G * M))

#--------Define the function to solve for initial momentum in PM---#
o3=mass1*mass1
o10=mass2*mass2
o6=x*x
o4=D*D
o5=o3*o4
o7=o5+o6
o24=(D**-2.)
o25=o24*o6
o8=(o7**-2.)
o13=(D**6.)
o15=(D**4.)
o9=(mass1**4.)
o11=(D**8.)
o12=-3.*o10*o11*o9
o14=-(o10*o13*o3*o6)
o16=(x**4.)
o17=14.*o15*o16*o3
o18=(x**6.)
o19=10.*o18*o4
o20=o12+o14+o17+o19
o22=(D**7.)
o23=1/o7
o26=o25+o3
o27=sqrt(o26)
o29=o10*o4
o30=o29+o6
o31=1/o30
o32=o10+o25
o33=sqrt(o32)
o45=(o7**-3.)
o38=-2.*o10*o13*o3*x
o39=(x**3.)
o40=56.*o15*o3*o39
o41=(x**5.)
o42=60.*o4*o41
o43=o38+o40+o42
o47=1./sqrt(o26)
o66=(D**-4.)
o52=(o30**-2.)
o50=1./sqrt(o32)

def f(x):
    return o22*(-(o23*o27)-o31*o33)+G_SCALED*o20*o8

    

x2, y2 = D / (1 + ( mass2 / mass1 )), 0
x1, y1 = x2 - D, 0
x2 *= qfactor
x1 *= qfactor

reduced_mass = mass1 * mass2 / ( mass1 + mass2 )
newton_p_theta = ( G_SCALED * mass1 * mass2 * reduced_mass * D )**(0.5)
px2, py2 = 0, p_theta / D
px1, py1 = 0, -py2
py2 *= pfactor
py1 *= pfactor

line1 = str(G_SCALED) + ' ' + str(M) + ' ' + str(L) + ' ' + str(T) 
line2 = str(mass1) + ' ' + str(x1) + ' ' + str(y1) + ' ' + str(px1) + ' ' + str(py1)
line3 = str(mass2) + ' ' + str(x2) + ' ' + str(y2) + ' ' + str(px2) + ' ' + str(py2)

f = args.file 
f.write(line1)
f.write('\n')
f.write(line2)
f.write('\n')
f.write(line3)
f.close()




