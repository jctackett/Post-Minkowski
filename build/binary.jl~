#Declare the body class with members and functions
mutable struct Body
	mass::Float64
	x::Float64
	y::Float64
	px::Float64
	py::Float64
end

function getP(body::Body)
	return ((body.px ^ 2) + (body.py ^ 2)) ^ 0.5
end

function getKE(body::Body)
	return (getP(body) ^ 2) / (2 * body.mass)
end

function toString(body::Body)::String
	return string(body.x) * ", " * string(body.y)
end

#Ensure command line arguments are present
if (size(ARGS, 1) != 3)
	println("Please provide an input file generated by TWO_BODY_RUNSCRIPT.py, then two csv files for the output of both bodies.")
	exit()
end

#Read in the data from the input file
input = open(ARGS[1])
lines = readlines(input)
close(input)

line1 = split(lines[1], " ")
line2 = split(lines[2], " ")
line3 = split(lines[3], " ")

G = parse(Float64, line1[1])
M = parse(Float64, line1[2])
L = parse(Float64, line1[3])
T = parse(Float64, line1[4])

M1, M2 = parse(Float64, line2[1]), parse(Float64, line3[1])
x1, x2 = parse(Float64, line2[2]), parse(Float64, line3[2])
y1, y2 = parse(Float64, line2[3]), parse(Float64, line3[3])
px1, px2 = parse(Float64, line2[4]), parse(Float64, line3[4])
py1, py2 = parse(Float64, line2[5]), parse(Float64, line3[5])

####Declare the bodies with their initial data
body1 = Body(M1, x1, y1, px1, py1)
body2 = Body(M2, x2, y2, px2, py2)

####Function for Hamiltonian
function Hamiltonian(body11::Body, body22::Body, userG::Float64)
	d1x, d1y = body11.px / body11.mass, body11.py / body11.mass
	d2x, d2y = body22.px / body22.mass, body22.py / body22.mass

	difX, difY = body22.x - body11.x, body22.y - body11.y
	r = (((difX ^ 2) + (difY ^ 2)) ^ 1.5)
	top = userG * body11.mass * body22.mass

	d1px, d1py = top * difX / r, top * difY / r
	d2px, d2py = - top * difX / r, - top * difY / r

	return [d1x, d1y, d2x, d2y, d1px, d1py, d2px, d2py]
end


println(Hamiltonian(body1, body2, G))
