//
//  main.cpp
//  Two_Body_Problem
//
//  Created by Zackary Windham on 3/2/20.
//  Copyright Â© 2020 Zackary Windham. All rights reserved.
//

#include <iostream>
#include <fstream>

#include "body.h"

using namespace std;

void rungeKutta4(Body& body1, Body& body2, const double& G);
string giveMomentum(const Body& body1, const Body& body2, const double& units);
string giveKE(const Body& body1, const Body& body2, const double& units);

int main(int argc, const char * argv[]) {
    
    //make sure the files are there and all work
    if (argc < 4)
    {
        cerr << "Please provide an input file generated by TWO_BODY_RUNSCRIPT.py, then two csv files for the output of both bodies." << endl;
        return 1;
    }
    ifstream inputFile(argv[1]);
    if (!inputFile)
    {
        cerr << "Unable to open " << argv[1] << " for input." << endl;
        return 2;
    }
    ofstream firstBody;
    firstBody.open(argv[2], ofstream::out | ofstream::trunc);
    if (!firstBody)
    {
        cerr << "Unable to open " << argv[2] << " for output." << endl;
        return 3;
    }
    ofstream secondBody;
    secondBody.open(argv[3], ofstream::out | ofstream::trunc);
    if (!secondBody)
    {
        cerr << "Unable to open " << argv[3] << " for output." << endl;
        return 4;
    }
    
    //Get the units that this is using, set up a conversion factor from arbitrary units to SI units for momentum and kinetic energy
    string dataLine;
    getline(inputFile, dataLine);
    stringstream iss1(dataLine);
    double G_SCALED, M, L, T;
    iss1 >> G_SCALED >> M >> L >> T;
    
    double pUnits = M * L / T;
    double KEUnits = pUnits * L / T;
    
    //Grab the parameters for the first body and initialize the first body
    getline(inputFile, dataLine);
    stringstream iss2(dataLine);
    double MASS_1, x1, y1, p1X, p1Y;
    iss2 >> MASS_1 >> x1 >> y1 >> p1X >> p1Y;
    
    Body body1 = Body(x1, y1, p1X, p1Y, MASS_1);
    
    //Do the same for the second body
    getline(inputFile, dataLine);
    stringstream iss3(dataLine);
    double MASS_2, x2, y2, p2X, p2Y;
    iss3 >> MASS_2 >> x2 >> y2 >> p2X >> p2Y;
    
    Body body2 = Body(x2, y2, p2X, p2Y, MASS_2);
    
    //Prepare the files for output of the bodies
    string xyline = "x , y";
    //firstBody << xyline << endl;
    //secondBody << xyline << endl;
    
    //Find out the number of orbits
    int userNum = 0;
    cout << "For how many orbits should the simulation run? ";
    cin >> userNum;
    cout << endl;
    
    //Set parameters for orbit number
    const int NUM_ORBITS = userNum;
    int orbitCount = 0;
    
    //Evolve the system using the solver
    while (orbitCount < NUM_ORBITS)
    {
        if (NUM_ORBITS - orbitCount < 100)
        {
            firstBody << body1 << endl;
            secondBody << body2 << endl;
        }
        if (abs(x1 - x2) * 100 < abs(body1.getX() - body2.getX()))
        {
            cerr << "Bodies no longer orbiting." << endl;
            firstBody.close();
            secondBody.close();
            return 5;
        }
            
        double lasty = body2.getY();
            
        rungeKutta4(body1, body2, G_SCALED);
            
        if ((body2.getX() > 0) && (body2.getY() > 0) && (lasty < 0))
        {
            ++orbitCount;
            if ((NUM_ORBITS <= 100) && (orbitCount % 10 == 0)) cout << orbitCount << endl << giveMomentum(body1, body2, pUnits) << giveKE(body1, body2, KEUnits) << endl;
            else if ((NUM_ORBITS <= 1000) && (orbitCount % 50 == 0)) cout << orbitCount << endl << giveMomentum(body1, body2, pUnits) << giveKE(body1, body2, KEUnits) << endl;
            else if ((NUM_ORBITS <= 100000) && (orbitCount % 100 == 0)) cout << orbitCount << endl << giveMomentum(body1, body2, pUnits) << giveKE(body1, body2, KEUnits) << endl;
            else if (orbitCount % 1000 == 0) cout << orbitCount << endl << giveMomentum(body1, body2, pUnits) << giveKE(body1, body2, KEUnits) << endl;
        }
    }
    
    firstBody.close();
    secondBody.close();

    return 0;
}

string giveMomentum(const Body& body1, const Body& body2, const double& units)
{
    stringstream os;
    double p1 = body1.getP() * units;
    double p2 = body2.getP() * units;
    os << "Body 1's momentum is " << p1 << " Newton-seconds." << endl;
    os << "Body 2's momentum is " << p2 << " Newton-seconds." << endl;
    return os.str();
}

string giveKE(const Body& body1, const Body& body2, const double& units)
{
    stringstream os;
    double KE1 = body1.getKE() * units;
    double KE2 = body2.getKE() * units;
    os << "Total kinetic energy of the system is " << KE1 + KE2 << " joules." << endl;
    return os.str();
}

void PM1(const Body& body1, const Body& body2, const double & G, double (&array)[4][2])
{
    for (int i = 0; i < 4; ++i)
    {
        for (int j = 0; j < 2; ++j)
        {
            array[i][j] = 0.0;
        }
    }
}

void hamiltonian(const Body& body1, const Body& body2, const double& G, double (&array)[4][2])
{
    double d1[2]{body1.getMomentumX() / body1.getMass(), body1.getMomentumY() / body1.getMass()};
    double d2[2]{body2.getMomentumX() / body2.getMass(), body2.getMomentumY() / body2.getMass()};
    
    double difX = body2.getX() - body1.getX();
    double difY = body2.getY() - body1.getY();
    double r = G * pow(pow(difX, 2.0) + pow(difY, 2.0), 1.5);
    double top = body1.getMass() * body1.getMass();
    
    double dP1[2]{top * difX / r, top * difY / r};
    double dP2[2]{- top * difX / r, - top * difY / r};
    
    double pm1[4][2];
    PM1(body1, body2, G, pm1);
    
    array[0][0] = d1[0] + pm1[0][0];
    array[0][1] = d1[1] + pm1[0][1];
    array[1][0] = d2[0] + pm1[1][0];
    array[1][1] = d2[1] + pm1[1][1];
    array[2][0] = dP1[0] + pm1[2][0];
    array[2][1] = dP1[1] + pm1[2][1];
    array[3][0] = dP2[0] + pm1[3][0];
    array[3][1] = dP2[1] + pm1[3][1];
}

void change(const Body& body1, const Body& body2, const double& G, double (&array)[4][2])
{
    hamiltonian(body1, body2, G, array);
}

void rungeKutta4(Body& body1, Body& body2, const double& G)
{
    //Redefine the step size to fit the arclength
    double qX = body2.getX() - body1.getX();
    double qY = body2.getY() - body1.getY();
    double pX = abs(body2.getMomentumX()) + abs(body1.getMomentumX());
    double pY = abs(body2.getMomentumY()) + abs(body1.getMomentumY());
    
    double qDot = pow(qX, 2) + pow(qY, 2);
    double pDot = pow(pX, 2) + pow(pY, 2);
    
    double stepSize = 2 * pow(pDot + (1 / pow(qDot, 2)), -0.5);
    
    //Establish k1 for the RungeKutta algorithm, use the known derivatives from the Hamiltonian
    double change1[4][2];
    change(body1, body2, G, change1);
    double k1[2][2]{{change1[0][0] * stepSize, change1[0][1] * stepSize}, {change1[1][0] * stepSize, change1[1][1] * stepSize}};
    double kP1[2][2]{{change1[2][0] * stepSize, change1[2][1] * stepSize}, {change1[3][0] * stepSize, change1[3][1] * stepSize}};
    
    double k12[2][2]{{k1[0][0] / 2, k1[0][1] / 2}, {k1[1][0] / 2, k1[1][1] / 2}};
    double kP12[2][2]{{kP1[0][0] / 2, kP1[0][1] / 2}, {kP1[1][0] / 2, kP1[1][1] / 2}};
    
    Body bodyk11 = Body(body1.getX() + k12[0][0], body1.getY() + k12[0][1], body1.getMomentumX() + kP12[0][0], body1.getMomentumY() + kP12[0][1], body1.getMass());
    Body bodyk12 = Body(body2.getX() + k12[1][0], body2.getY() + k12[1][1], body2.getMomentumX() + kP12[1][0], body2.getMomentumY() + kP12[1][1], body2.getMass());
    
    //Establish k2 for the algorithm
    double change2[4][2];
    change(bodyk11, bodyk12, G, change2);
    double k2[2][2]{{change2[0][0] * stepSize, change2[0][1] * stepSize}, {change2[1][0] * stepSize, change2[1][1] * stepSize}};
    double kP2[2][2]{{change2[2][0] * stepSize, change2[2][1] * stepSize}, {change2[3][0] * stepSize, change2[3][1] * stepSize}};
    
    double k22[2][2]{{k2[0][0] / 2, k2[0][1] / 2}, {k2[1][0] / 2, k2[1][1] / 2}};
    double kP22[2][2]{{kP2[0][0] / 2, kP2[0][1] / 2}, {kP2[1][0] / 2, kP2[1][1] / 2}};
    
    Body bodyk21 = Body(body1.getX() + k22[0][0], body1.getY() + k22[0][1], body1.getMomentumX() + kP22[0][0], body1.getMomentumY() + kP22[0][1], body1.getMass());
    Body bodyk22 = Body(body2.getX() + k22[1][0], body2.getY() + k22[1][1], body2.getMomentumX() + kP22[1][0], body2.getMomentumY() + kP22[1][1], body2.getMass());
    
    //Establish k3
    double change3[4][2];
    change(bodyk21, bodyk22, G, change3);
    double k3[2][2]{{change3[0][0] * stepSize, change3[0][1] * stepSize}, {change3[1][0] * stepSize, change3[1][1] * stepSize}};
    double kP3[2][2]{{change3[2][0] * stepSize, change3[2][1] * stepSize}, {change3[3][0] * stepSize, change3[3][1] * stepSize}};
    
    Body bodyk31 = Body(body1.getX() + k3[0][0], body1.getY() + k3[0][1], body1.getMomentumX() + kP3[0][0], body1.getMomentumY() + kP3[0][1], body1.getMass());
    Body bodyk32 = Body(body2.getX() + k3[1][0], body2.getY() + k3[1][1], body2.getMomentumX() + kP3[1][0], body2.getMomentumY() + kP3[1][1], body2.getMass());
    
    //Establish k4
    double change4[4][2];
    change(bodyk31, bodyk32, G, change4);
    double k4[2][2]{{change4[0][0] * stepSize, change4[0][1] * stepSize}, {change4[1][0] * stepSize, change4[1][1] * stepSize}};
    double kP4[2][2]{{change4[2][0] * stepSize, change4[2][1] * stepSize}, {change4[3][0] * stepSize, change4[3][1] * stepSize}};
    
    //Modify k1, k2, k3, and k4 so that they are weighted correctly
    double k1F[2][2]{{k1[0][0] / 6, k1[0][1] / 6}, {k1[1][0] / 6, k1[1][1] / 6}};
    double kP1F[2][2]{{kP1[0][0] / 6, kP1[0][1] / 6}, {kP1[1][0] / 6, kP1[1][1] / 6}};
    
    double k2F[2][2]{{k2[0][0] / 3, k2[0][1] / 3}, {k2[1][0] / 3, k2[1][1] / 3}};
    double kP2F[2][2]{{kP2[0][0] / 3, kP2[0][1] / 3}, {kP2[1][0] / 3, kP2[1][1] / 3}};
    
    double k3F[2][2]{{k3[0][0] / 3, k3[0][1] / 3}, {k3[1][0] / 3, k3[1][1] / 3}};
    double kP3F[2][2]{{kP3[0][0] / 3, kP3[0][1] / 3}, {kP3[1][0] / 3, kP3[1][1] / 3}};
    
    double k4F[2][2]{{k4[0][0] / 6, k4[0][1] / 6}, {k4[1][0] / 6, k4[1][1] / 6}};
    double kP4F[2][2]{{kP4[0][0] / 6, kP4[0][1] / 6}, {kP4[1][0] / 6, kP4[1][1] / 6}};
    
    //Use the weighted k1, k2, k3, and k4 to create the steps
    double step[2][2]{{k1F[0][0] + k2F[0][0] + k3F[0][0] + k4F[0][0], k1F[0][1] + k2F[0][1] + k3F[0][1] + k4F[0][1]}, {k1F[1][0] + k2F[1][0] + k3F[1][0] + k4F[1][0], k1F[1][1] + k2F[1][1] + k3F[1][1] + k4F[1][1]}};
    
    double stepP[2][2]{{kP1F[0][0] + kP2F[0][0] + kP3F[0][0] + kP4F[0][0], kP1F[0][1] + kP2F[0][1] + kP3F[0][1] + kP4F[0][1]}, {kP1F[1][0] + kP2F[1][0] + kP3F[1][0] + kP4F[1][0], kP1F[1][1] + kP2F[1][1] + kP3F[1][1] + kP4F[1][1]}};
    
    //Add the step to the original position and momentum
    body1.setPosition(body1.getX() + step[0][0], body1.getY() + step[0][1]);
    body2.setPosition(body2.getX() + step[1][0], body2.getY() + step[1][1]);
    body1.setMomentum(body1.getMomentumX() + stepP[0][0], body1.getMomentumY() + stepP[0][1]);
    body2.setMomentum(body2.getMomentumX() + stepP[1][0], body2.getMomentumY() + stepP[1][1]);
}
